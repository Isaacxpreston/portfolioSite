'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwErrorIfIsNotText = exports.stylesExist = exports.setCacheId = exports.removeIdFromCache = exports.getActiveValuesFromCache = exports.createIdForTag = undefined;

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// external dependencies
var cache = {};

/**
 * get the ids that have active values in cache
 *
 * @returns {Array<string>}
 */


// constants
var getActiveValuesFromCache = function getActiveValuesFromCache() {
  return Object.keys(cache).reduce(function (values, id) {
    if (cache[id]) {
      return values.concat([cache[id]]);
    }

    return values;
  }, []);
};

/**
 * determine if the style passed already exists
 *
 * @param {string} id
 * @param {string} value
 * @returns {boolean}
 */
var stylesExist = function stylesExist(id, value) {
  return document.getElementById(id) || getActiveValuesFromCache().indexOf(value) !== -1;
};

/**
 * create a unique ID for the style tag
 *
 * @param {string} id
 * @param {string} value
 * @returns {string}
 */
var createIdForTag = function createIdForTag(id, value) {
  var finalId = (0, _isUndefined2.default)(id) ? _nodeUuid2.default.v4() : id;

  if (stylesExist(finalId, value)) {
    return null;
  }

  cache[finalId] = value;

  return finalId;
};

/**
 * remove the ID from cache
 *
 * @param {string} id
 */
var removeIdFromCache = function removeIdFromCache(id) {
  delete cache[id];
};

/**
 * update the cached value
 *
 * @param {string} id
 * @param {string} value
 */
var setCacheId = function setCacheId(id, value) {
  cache[id] = value;
};

/**
 * throw an error if the provided children is not a text node
 *
 * @param {*} children
 */
var throwErrorIfIsNotText = function throwErrorIfIsNotText(children) {
  if (!(0, _isString2.default)(children)) {
    throw new Error(_constants.ONLY_TEXT_ERROR);
  }
};

exports.createIdForTag = createIdForTag;
exports.getActiveValuesFromCache = getActiveValuesFromCache;
exports.removeIdFromCache = removeIdFromCache;
exports.setCacheId = setCacheId;
exports.stylesExist = stylesExist;
exports.throwErrorIfIsNotText = throwErrorIfIsNotText;