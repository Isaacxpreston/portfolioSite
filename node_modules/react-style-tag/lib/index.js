'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prefixCss = exports.minifyCss = exports.hashKeys = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isBoolean = require('lodash/isBoolean');

var _isBoolean2 = _interopRequireDefault(_isBoolean);

var _isNull = require('lodash/isNull');

var _isNull2 = _interopRequireDefault(_isNull);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('./constants');

var _hash = require('./hash');

var _hash2 = _interopRequireDefault(_hash);

var _transform = require('./transform');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // external dependencies


// local utils


var REACT_STYLE_TAG_GLOBAL_PROPERTIES = {
  doNotPrefix: false,
  hasSourceMap: false,
  isMinified: false
};

var Style = function (_Component) {
  _inherits(Style, _Component);

  function Style() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Style);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Style.__proto__ || Object.getPrototypeOf(Style)).call.apply(_ref, [this].concat(args))), _this), _this.id = null, _this.removeTagFromHead = function (tagType) {
      var tag = _this.refs[tagType];

      if (tag) {
        document.head.removeChild(tag);
      }
    }, _this.setCorrectTag = function () {
      var hasSourceMap = _this.props.hasSourceMap;


      if (!(0, _isNull2.default)(_this.id)) {
        var hasSourceMapGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.hasSourceMap;


        var hasSourceMapFinal = (0, _transform.getCoalescedPropsValue)(hasSourceMap, hasSourceMapGlobal);

        if (hasSourceMapFinal) {
          _this.setLinkTag();
        } else {
          _this.setStyleTag();
        }
      }
    }, _this.setLinkTag = function () {
      var _this$props = _this.props,
          children = _this$props.children,
          doNotPrefix = _this$props.doNotPrefix,
          isMinified = _this$props.isMinified;


      (0, _utils.throwErrorIfIsNotText)(children);

      _this.removeTagFromHead('style');

      if (_constants.HAS_BLOB_SUPPORT) {
        var doNotPrefixGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.doNotPrefix,
            isMinifiedGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.isMinified;


        var doNotPrefixFinal = (0, _transform.getCoalescedPropsValue)(doNotPrefix, doNotPrefixGlobal);
        var isMinifiedFinal = (0, _transform.getCoalescedPropsValue)(isMinified, isMinifiedGlobal);
        var transformedCss = (0, _transform.getTransformedCss)(children, doNotPrefixFinal, isMinifiedFinal);

        var link = _this.refs.link;
        var blob = new window.Blob([transformedCss], {
          type: 'text/css'
        });

        link.href = URL.createObjectURL(blob);

        document.head.appendChild(link);
      } else {
        throw new Error(_constants.NO_BLOB_SUPPORT_ERROR);
      }
    }, _this.setStyleTag = function () {
      var _this$props2 = _this.props,
          children = _this$props2.children,
          doNotPrefix = _this$props2.doNotPrefix,
          isMinified = _this$props2.isMinified;
      var doNotPrefixGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.doNotPrefix,
          isMinifiedGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.isMinified;


      (0, _utils.throwErrorIfIsNotText)(children);

      _this.removeTagFromHead('link');

      var doNotPrefixFinal = (0, _transform.getCoalescedPropsValue)(doNotPrefix, doNotPrefixGlobal);
      var isMinifiedFinal = (0, _transform.getCoalescedPropsValue)(isMinified, isMinifiedGlobal);

      var style = _this.refs.style;

      style.textContent = (0, _transform.getTransformedCss)(children, doNotPrefixFinal, isMinifiedFinal);

      document.head.appendChild(style);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Style, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          children = _props.children,
          id = _props.id;


      this.id = (0, _utils.createIdForTag)(id, children);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setCorrectTag();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var children = this.props.children;


      (0, _utils.setCacheId)(this.id, children);

      this.setCorrectTag();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeTagFromHead('link');
      this.removeTagFromHead('style');

      if (!(0, _isNull2.default)(this.id)) {
        (0, _utils.removeIdFromCache)(this.id);
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(_ref2) {
      var nextChildren = _ref2.children;
      var children = this.props.children;


      return children !== nextChildren;
    }

    /**
     * set the global options for all instances of Style
     *
     * @param {object} options
     * @param {boolean} [options.doNotPrefix]
     * @param {boolean} [options.hasSourceMap]
     * @param {boolean} [options.isMinified]
     */

  }, {
    key: 'render',
    value: function render() {
      if ((0, _isNull2.default)(this.id)) {
        return null;
      }

      var _props2 = this.props,
          children = _props2.children,
          doNotPrefixIgnored = _props2.doNotPrefix,
          hasSourceMap = _props2.hasSourceMap,
          idIgnored = _props2.id,
          isMinifiedIgnored = _props2.isMinified,
          otherProps = _objectWithoutProperties(_props2, ['children', 'doNotPrefix', 'hasSourceMap', 'id', 'isMinified']);

      var hasSourceMapGlobal = REACT_STYLE_TAG_GLOBAL_PROPERTIES.hasSourceMap;


      var hasSourceMapFinal = (0, _transform.getCoalescedPropsValue)(hasSourceMap, hasSourceMapGlobal);

      if (hasSourceMapFinal && _constants.HAS_BLOB_SUPPORT) {
        return _react2.default.createElement('link', _extends({
          id: this.id,
          rel: 'stylesheet',
          ref: 'link'
        }, otherProps));
      }

      return _react2.default.createElement(
        'style',
        _extends({
          id: this.id,
          ref: 'style'
        }, otherProps),
        children
      );
    }
  }], [{
    key: 'setGlobalOptions',
    value: function setGlobalOptions(options) {
      Object.keys(options).forEach(function (option) {
        if (REACT_STYLE_TAG_GLOBAL_PROPERTIES.hasOwnProperty(option)) {
          if (!(0, _isBoolean2.default)(options[option])) {
            throw new Error(option + ' must be a boolean value.');
          }

          REACT_STYLE_TAG_GLOBAL_PROPERTIES[option] = options[option];
        }
      });
    }

    /**
     * remove the tagType from the document head if it exists
     *
     * @param {string} tagType
     */


    /**
     * based on whether sourcemaps are requested, set either a link or style tag
     */


    /**
     * set the link tag with the prefixed / minified css text as a blob and move to the document head
     */


    /**
     * set the style tag with the prefixed / minified css text and move to the document head
     */

  }]);

  return Style;
}(_react.Component);

Style.propTypes = {
  children: _react.PropTypes.node,
  doNotPrefix: _react.PropTypes.bool,
  hasSourceMap: _react.PropTypes.bool,
  isMinified: _react.PropTypes.bool
};
exports.hashKeys = _hash2.default;
exports.minifyCss = _transform.minify;
exports.prefixCss = _transform.prefixCss;
exports.default = Style;